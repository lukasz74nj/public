Liveness is a concurrent application's ability to execute in a timely manner.
The most common liveness problems:

1) Deadlock

- the most widely encountered liveness hazard

- two or more threads are blocked forever, waiting for each other

- a program will be free of lock-ordering deadlocks if all threads acquire the
locks they need in a fixed global order

- a program that never acquires more than one lock at a time cannot experience
lock-ordering
deadlock

- alien methods should not be called with a lock held (these methods might
acquire other locks risking a deadlock)

- use timed lock acquisition (Lock.tryLock()) when acquiring multiple locks (as
opposed to intrinsic locking) in order to detect and recover from possible
deadlocks

2) Starvation

-  a thread is unable to gain regular access to shared resources and is unable
to make progress

3) Livelock

- threads are unable to make further progress; the threads are not blocked but
are too busy responding to each other to resume work

- this is comparable to two people attempting to pass each other in a corridor,
where both move at the same time to let the other pass
