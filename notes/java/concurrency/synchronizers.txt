A synchronizer is any object that coordinates the control flow of threads based
on its state. Synchronizers encapsulate state that determines whether threads
arriving at the synchronizer should be allowed to pass or forced to wait,
provide methods to manipulate that state, and provide methods to wait
efficiently for the synchronizer to enter the desired state.

1) Blocking queues

- coordinate the control flow of producer and consumer threads

2) FutureTask

- used by the Executor framework to represent asynchronous tasks, and can also
be used to represent any potentially lenghtly computation whose results are
needed later

3) Latches

- a synchronizer that can delay the progress of threads until it reaches its
terminal state; latches can be used to ensure that certain activities do not
proceed until other one-time activities complete

- CountDownLatch allows one or more threads to wait for a set of events to
occur (the latch state consists of a counter representing the number of events
to wait for)

4) Semaphores

- counting semaphores are used to control the number of activities that can
access the certain resource or perform a given action at the same time, i.e.
to implement resource pools or to impose a bound on a collection

- a binary semaphore (a counting semaphore with an initial count of one) can
be used as a mutex with non-reentrant locking semantics

- semaphores don't associate dispensed permits with threads, so a permit
acquired in one thread can be released from another thread

5) Barriers

- all threads must come together at a barrier point in order to proceed

- CyclicBarrier allows a fixed number of parties to rendezvous repeatedly at a
barrier point and is useful in parallel iterative algorithms 

- Exchanger - a two-party barrier in which the parties exchange data at the
barrier point
