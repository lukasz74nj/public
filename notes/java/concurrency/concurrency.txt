- a class is thread-safe if it behaves correctly when accessed from multiple
threads, and with no additional synchronization or coordination on the part of
the calling code

- thread waits should always occur in loops in order to guard against spurious
wakeups (a thread can wake up without being notified, interrupted, or timing
out)

- the use of synchronized methods or statements provides access to the implicit
monitor lock associated with every object, but forces all lock acquisitions and
releases to occur in a block-structured way: when multiple locks are acquired
they must be released in the opposite order, and all locks must be released in
the same lexical scope in which they were acquired 

- the biggest advantage of Lock objects over implicit locks is their ability to
back out of an attempt to acquire a lock

- one advantage of using intrinsic locks over ReentrantLock is a possibility
that a JVM can perform optimizations such as lock elision (for thread-confined
lock objects) and lock coarsening to eliminate synchronization with intrinsic
locks

- most of the executor implementations in java.util.concurrent use thread pools,
which consist of worker threads; using worker threads minimizes the overhead due
to thread creation; thread objects use a significant amount of memory, and in a
large-scale application, allocating and deallocating many thread objects creates
a significant memory management overhead

- Condition factors out the Object monitor methods into distinct objects to give
the effect of having multiple wait-sets per object, by combining them with the
use of arbitrary Lock implementations

- a Condition implementation can provide behavior and semantics that is
different from that of the Object monitor methods, such as guaranteed ordering
for notifications, or not requiring a lock to be held when performing
notifications 
